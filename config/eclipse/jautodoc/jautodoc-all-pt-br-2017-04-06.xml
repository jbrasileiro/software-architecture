<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<jautodoc-preferences>
    <options>
        <completeExistingJavadoc>true</completeExistingJavadoc>
        <keepExistingJavadoc>false</keepExistingJavadoc>
        <replaceExistingJavadoc>false</replaceExistingJavadoc>
        <includePublic>true</includePublic>
        <includeProtected>true</includeProtected>
        <includePackage>true</includePackage>
        <includePrivate>true</includePrivate>
        <includeTypes>true</includeTypes>
        <includeFields>true</includeFields>
        <includeMethods>true</includeMethods>
        <getterSetterOnly>false</getterSetterOnly>
        <excludeGetterSetter>false</excludeGetterSetter>
        <excludeOverriding>true</excludeOverriding>
        <addTodoForAutodoc>true</addTodoForAutodoc>
        <createDummyComment>true</createDummyComment>
        <singleLineComment>false</singleLineComment>
        <useEclipseFormatter>true</useEclipseFormatter>
        <getterSetterFromField>true</getterSetterFromField>
        <includeSubPackages>false</includeSubPackages>
        <getterSetterFromFieldFirst>true</getterSetterFromFieldFirst>
        <getterSetterFromFieldReplace>false</getterSetterFromFieldReplace>
        <addHeader>true</addHeader>
        <replaceHeader>true</replaceHeader>
        <multiCommentHeader>true</multiCommentHeader>
        <usePackageInfo>false</usePackageInfo>
    </options>
    <getSetFromFieldReplacements>
        <getSetFromFieldReplacement>
            <fieldPrefix>Propriedade</fieldPrefix>
            <returnPrefix>Retorna o valor de</returnPrefix>
            <parameterPrefix>Define um novo valor para</parameterPrefix>
        </getSetFromFieldReplacement>
        <getSetFromFieldReplacement>
            <fieldPrefix></fieldPrefix>
            <returnPrefix>Retorna o valor de</returnPrefix>
            <parameterPrefix>Define o novo valor de</parameterPrefix>
        </getSetFromFieldReplacement>
    </getSetFromFieldReplacements>
    <tagOrders>
        <tagOrder>@author</tagOrder>
        <tagOrder>@version</tagOrder>
        <tagOrder>@param</tagOrder>
        <tagOrder>@return</tagOrder>
        <tagOrder>@throws</tagOrder>
        <tagOrder>@see</tagOrder>
        <tagOrder>@since</tagOrder>
        <tagOrder>@serial</tagOrder>
        <tagOrder>@serialField</tagOrder>
        <tagOrder>@serialData</tagOrder>
        <tagOrder>@deprecated</tagOrder>
    </tagOrders>
    <properties/>
    <replacements>
        <replacement mode="0" scope="1" shortcut="get">Retorna o valor</replacement>
        <replacement mode="0" scope="1" shortcut="set">Define o novo valor</replacement>
        <replacement mode="0" scope="1" shortcut="add">Adiciona um novo valor</replacement>
        <replacement mode="0" scope="1" shortcut="edit">Edita o valor</replacement>
        <replacement mode="0" scope="1" shortcut="remove">Remove o valor</replacement>
        <replacement mode="0" scope="1" shortcut="init">Inicializar</replacement>
        <replacement mode="0" scope="1" shortcut="parse">Parser o valor</replacement>
        <replacement mode="0" scope="1" shortcut="create">Criar um </replacement>
        <replacement mode="0" scope="1" shortcut="build">Monta o</replacement>
        <replacement mode="0" scope="1" shortcut="is">Verifica se o valor</replacement>
        <replacement mode="0" scope="1" shortcut="print">Printa o valor</replacement>
        <replacement mode="0" scope="1" shortcut="has">Verifica se possuiu</replacement>
        <replacement mode="0" scope="1" shortcut="Transformer">Transformar para</replacement>
        <replacement mode="0" scope="1" shortcut="Abstract">Abstração</replacement>
        <replacement mode="0" scope="1" shortcut="Exception">Exceção</replacement>
        <replacement mode="0" scope="1" shortcut="transform">Transforma</replacement>
        <replacement mode="0" scope="1" shortcut="BO">'Business Object' (Objecto de negócio)</replacement>
        <replacement mode="0" scope="1" shortcut="VO">'Value Object' (Objeto de valor)</replacement>
        <replacement mode="0" scope="1" shortcut="TO">'Transfer Object' (Objeto de Transferência)</replacement>
        <replacement mode="0" scope="1" shortcut="DTO">'Data transfer object' (Objeto de Transferência de Dados)</replacement>
    </replacements>
    <templates>
        <typeTemplate name="Type.Constantes" useSignature="true" defaultTemplate="false" kind="1">
            <regex>(.+)Constants</regex>
            <example>BooleanConstants</example>
            <text>/**
 * Object class representa os valores constantes de ${e.g(1)}
 */</text>
            <childTemplates/>
        </typeTemplate>
        <typeTemplate name="Type.TypeTransformer" useSignature="true" defaultTemplate="false" kind="1">
            <regex>(Abstract){0,1}(.+){0,1}Transformer(List){0,1}(.+){0,1}To([A-Za-z0-9_]+){0,1}[ \t\n\r]*(&lt;[ \t\n\r]*(.+)[ \t\n\r]*,[ \t\n\r]*(.+)[ \t\n\r]*&gt;){0,1}</regex>
            <example>AbstractTransformerListTo&lt;I, O&gt;</example>
            <text>/**
 * Transformador#if(${e.g(1)}=='Abstract') abstrato#end #if(${e.g(3).rsfl()}!='') de lista#end:
 * de#if(${e.g(4)}!='') ${e.g(4).rsfl()}#end#if(${e.g(7)}!='') tipo genérico ${e.g(7)}#end (IN)
 * para#if(${e.g(5)}!='') ${e.g(5).rsfl()}#end#if(${e.g(8)}!='') tipo genérico ${e.g(8)}#end (OUT).
 */</text>
            <childTemplates/>
        </typeTemplate>
        <typeTemplate name="Type.TypeRuntimeException" useSignature="false" defaultTemplate="false" kind="1">
            <regex>(.+)RuntimeException</regex>
            <example>ExampleRuntimeException</example>
            <text>/**
 * Object do tipo ${e.getType().fu()} representa uma excessão não propagável (unchecked exception) de ${e.rsfl()}.
 */</text>
            <childTemplates/>
        </typeTemplate>
        <typeTemplate name="Type.TypeException" useSignature="false" defaultTemplate="false" kind="1">
            <regex>(.+)Exception</regex>
            <example>ExampleException</example>
            <text>/**
 * Object do tipo ${e.getType().fu()} representa uma excessão propagável (Checked exception) de ${e.rsfl()}.
 */</text>
            <childTemplates/>
        </typeTemplate>
        <typeTemplate name="Type.Factory" useSignature="false" defaultTemplate="false" kind="1">
            <regex>(.+)Factory</regex>
            <example>MessageFactory</example>
            <text>/**
 * A factory for creating ${e.g(1)} objects.
 */</text>
            <childTemplates>
                <methodTemplate name="Type.Factory.Method.create" useSignature="false" defaultTemplate="false" kind="3">
                    <regex>create(.+)</regex>
                    <example>createMessage</example>
                    <text>/**
 * Creates a new ${e.p().g(1)} object.
 */</text>
                    <childTemplates/>
                </methodTemplate>
            </childTemplates>
        </typeTemplate>
        <typeTemplate name="Type.Observer" useSignature="false" defaultTemplate="false" kind="1">
            <regex>(.+)Observer</regex>
            <example>ImageObserver</example>
            <text>/**
 * An asynchronous update interface for receiving notifications
 * about ${e.g(1)} information as the ${e.g(1)} is constructed.
 */</text>
            <childTemplates>
                <methodTemplate name="Type.Observer.Method.update" useSignature="false" defaultTemplate="false" kind="3">
                    <regex>.*</regex>
                    <example>imageUpdate</example>
                    <text>/**
 * This method is called when information about an ${e.p().g(1)}
 * which was previously requested using an asynchronous
 * interface becomes available.
 */</text>
                    <childTemplates/>
                </methodTemplate>
            </childTemplates>
        </typeTemplate>
        <typeTemplate name="Type.Listener" useSignature="false" defaultTemplate="false" kind="1">
            <regex>(.+)Listener</regex>
            <example>AutodocListener</example>
            <text>/**
 * The listener interface for receiving ${e.g(1).fl()} events.
 * The class that is interested in processing a ${e.g(1).fl()}
 * event implements this interface, and the object created
 * with that class is registered with a component using the
 * component's &lt;code&gt;add${e.g(1)}Listener&lt;code&gt; method. When
 * the ${e.g(1).fl()} event occurs, that object's appropriate
 * method is invoked.
 *
 * @see ${e.g(1)}Event
 */</text>
            <childTemplates>
                <methodTemplate name="Type.Listener.Method.created" useSignature="false" defaultTemplate="false" kind="3">
                    <regex>(.*)Created</regex>
                    <example>autodocCreated</example>
                    <text>/**
 * Invoked when ${e.g(1).rs()} is created.
 */</text>
                    <childTemplates/>
                </methodTemplate>
                <methodTemplate name="Type.Listener.Method.updated" useSignature="false" defaultTemplate="false" kind="3">
                    <regex>(.*)Updated</regex>
                    <example>autodocUpdated</example>
                    <text>/**
 * Invoked when ${e.g(1).rs()} update occurs.
 */</text>
                    <childTemplates/>
                </methodTemplate>
            </childTemplates>
        </typeTemplate>
        <typeTemplate name="Type.Default" useSignature="false" defaultTemplate="true" kind="1">
            <regex>.+</regex>
            <example>ExampleType</example>
            <text>/**
## type: class|interface|enum
 * Object ${e.getType().fu()} representa um ${e}.
 */</text>
            <childTemplates/>
        </typeTemplate>
        <fieldTemplate name="Field.serialVersionUID" useSignature="false" defaultTemplate="false" kind="2">
            <regex>serialVersionUID</regex>
            <example>serialVersionUID</example>
            <text>/**
 * serialVersionUID - Número de versão que é usado durante a desserialização para verificar se o "sender" e o "receiver" de um objeto serializado carregaram classes para esse objeto que são compatíveis com a serialização.
 */</text>
            <childTemplates/>
        </fieldTemplate>
        <fieldTemplate name="Field.fPrefix" useSignature="false" defaultTemplate="false" kind="2">
            <regex>f([A-Z].+)</regex>
            <example>fExampleMember</example>
            <text>/**
 * Propriedade ${e.g(1).rsfl()}.
 */</text>
            <childTemplates/>
        </fieldTemplate>
        <fieldTemplate name="Field.thePrefix" useSignature="false" defaultTemplate="false" kind="2">
            <regex>the[A-Z].+</regex>
            <example>theNumberOfQuestions</example>
            <text>/**
 * ${e.rsfu()}.
 */</text>
            <childTemplates/>
        </fieldTemplate>
        <fieldTemplate name="Field.Default" useSignature="false" defaultTemplate="true" kind="2">
            <regex>.+</regex>
            <example>numberOfQuestions</example>
            <text>/**
#if(${e.isStatic()} &amp;&amp; ${e.isFinal()})
 * Um valor constante ${e}.
#else
 * Propriedade ${e.rs()}.
#end
 */</text>
            <childTemplates/>
        </fieldTemplate>
        <methodTemplate name="Method.getInstance" useSignature="false" defaultTemplate="false" kind="3">
            <regex>getInstance</regex>
            <example>getInstance</example>
            <text>/**
 * Retornar uma instancia de  ${e.getDeclaringType()}.
 * 
 * @return uma instancia de ${e.getDeclaringType()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Getter" useSignature="true" defaultTemplate="false" kind="3">
            <regex>\S+ get(\S+)\(.*\)</regex>
            <example>int getNumberOfQuestions()</example>
            <text>/**
 * Retornar ${e.g(1).rsfl()}.
 * 
 * @return  - Retornar ${e.g(1).rsfl()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Setter" useSignature="true" defaultTemplate="false" kind="3">
            <regex>void set(\S+)\([^,]+ ([^,]+)\)</regex>
            <example>void setNumberOfQuestions(int number)</example>
            <text>/**
 * Define o valor de ${e.g(1).rsfl()}.
 * 
 * @param - Define o valor de ${e.g(2)} para ${e.g(1).rsfl()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.boolean Getter" useSignature="true" defaultTemplate="false" kind="3">
            <regex>boolean is(.+)\(.*\)</regex>
            <example>boolean isBlue()</example>
            <text>/**
 * Verificar se ${e.g(1).rsfl()}.
 * 
 * @return true, se ${e.g(1).rsfl()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Main-Method" useSignature="true" defaultTemplate="false" kind="3">
            <regex>void main\(String\[\] (\S+)\)</regex>
            <example>void main(String[] args)</example>
            <text>/**
 * The main method.
 * 
 * @param ${e.g(1)} the arguments
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Constructor" useSignature="true" defaultTemplate="false" kind="3">
            <regex>(\S+)\(.*\)</regex>
            <example>SimpleClass()</example>
            <text>/**
 * Construtor para criar uma nova instância ${e.g(1)}.
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Returns void" useSignature="true" defaultTemplate="false" kind="3">
            <regex>void (.+)\(.*\)</regex>
            <example>void doSomething()</example>
            <text>/**
 * ${e.g(1).rsfu()}.
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.ReturnList" useSignature="false" defaultTemplate="false" kind="3">
            <regex>List(&lt;(.+){0,1}&gt;){0,1} (\S+)\(.*\)</regex>
            <example>List&lt;X&gt; asdasd(Object o)</example>
            <text>/**
 * ${e.g(2).rsfu()}.
 * 
 * @return - Retorna ${e.g(1).rsfl()}: Lista de valores#if(${e.g(2)}!='') do tipo ${e.g(2)}#end.
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Returns boolean" useSignature="true" defaultTemplate="false" kind="3">
            <regex>boolean (\S+)\(.*\)</regex>
            <example>boolean doSomething(int parameter)</example>
            <text>/**
 * Verificar se ${e.g(1).rsfu()}.
 * 
 * @return - true, se ${e.g(1).rsfu()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Returns other" useSignature="true" defaultTemplate="false" kind="3">
            <regex>(\S+) (\S+)\(.*\)</regex>
            <example>ReturnValue calculateSomething()</example>
            <text>/**
 * ${e.g(2).rsfu()}.
 * 
 * @return - Retorna o valor de ${e.g(1).rsfl()}
 */</text>
            <childTemplates/>
        </methodTemplate>
        <methodTemplate name="Method.Default" useSignature="false" defaultTemplate="true" kind="3">
            <regex>.+</regex>
            <example>doSomething</example>
            <text>/**
## Actually this is not used, because there
## are templates for different return types
 * ${e.rsfu()}.
 */</text>
            <childTemplates/>
        </methodTemplate>
        <parameterTemplate name="Parameter.ParametroGenericoOUT" useSignature="false" defaultTemplate="false" kind="4">
            <regex>&lt;O&gt;</regex>
            <example>&lt;O&gt;</example>
            <text>/**
 * @param ${e} - Parámetro genérico de saída (OUT). 
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.ParametroGenericoIN" useSignature="false" defaultTemplate="false" kind="4">
            <regex>&lt;I&gt;</regex>
            <example>&lt;I&gt;</example>
            <text>/**
 * @param ${e} - Parámetro genérico de entrada (IN). 
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.ParameterList" useSignature="true" defaultTemplate="false" kind="4">
            <regex>List(&lt;[ ]*(.+){0,1}[ ]*&gt;)[ ]+(.+)</regex>
            <example>List&lt;X&gt; value</example>
            <text>/**
 * @param ${e.g(3)} - Lista de valores#if(${e.g(2)}!='') do tipo ${e.g(2)}#end.
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.Field Detail" useSignature="false" defaultTemplate="false" kind="4">
            <regex>(.*)detail(.*)</regex>
            <example>detail</example>
            <text>/**
 * @param - ${e} 
 *        -  Define a mensage de detalhe da excessão.
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.Field cause" useSignature="false" defaultTemplate="false" kind="4">
            <regex>cause</regex>
            <example>cause</example>
            <text>/**
 * @param - ${e}
 * 		  - Causa da excessão 
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.Generic Type Parameter" useSignature="false" defaultTemplate="false" kind="4">
            <regex>&lt;(.+)&gt;</regex>
            <example>&lt;E&gt;</example>
            <text>/**
#if(${e.g(1)} == 'E')
 * @param ${e} the element type
#elseif(${e.g(1)} == 'K')
 * @param ${e} the key type
#elseif(${e.g(1)} == 'N')
 * @param ${e} the number type
#elseif(${e.g(1)} == 'V')
 * @param ${e} the value type
#else
 * @param ${e} the generic type
#end
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.compUnit" useSignature="false" defaultTemplate="false" kind="4">
            <regex>compUnit</regex>
            <example>compUnit</example>
            <text>/**
## Example for shortcuts
 * @param ${e} the compilation unit
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.pPrefix" useSignature="false" defaultTemplate="false" kind="4">
            <regex>p([A-Z].+)</regex>
            <example>pField</example>
            <text>/**
 * @param ${e} the ${e.g(1).rsfl()} 
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <parameterTemplate name="Parameter.Default" useSignature="false" defaultTemplate="true" kind="4">
            <regex>.+</regex>
            <example>simpleParameter</example>
            <text>/**
 * @param ${e} - Parâmetro ${e.rsfl()}
 */</text>
            <childTemplates/>
        </parameterTemplate>
        <exceptionTemplate name="Exception.IOException" useSignature="false" defaultTemplate="false" kind="5">
            <regex>IOException</regex>
            <example>IOException</example>
            <text>/**
 * @throws ${e} Propaga uma I/O exception ocorrida.
 */</text>
            <childTemplates/>
        </exceptionTemplate>
        <exceptionTemplate name="Exception.Default" useSignature="false" defaultTemplate="true" kind="5">
            <regex>.+</regex>
            <example>ExampleException</example>
            <text>/**
 * @throws Propaga uma a exessão ${e}.
 * Exessão to tipo ${e.sfl()}.
 */</text>
            <childTemplates/>
        </exceptionTemplate>
    </templates>
    <headerText>/*
/*******************************************************
 * Copyright CWI/Riachuello - All Rights Reserved
 * 
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *******************************************************
 */</headerText>
    <packageDocText>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
  Provides...
&lt;/body&gt;
&lt;/html&gt;</packageDocText>
    <packageInfoText>/**
 * Provides...
 */
package ${package_name};</packageInfoText>
</jautodoc-preferences>
